Grammar

    0 $accept: line_list $end

    1 line_list: line
    2          | line_list line

    3 line: logic3 CR
    4     | logic3 $end

    5 logic3: logic2
    6       | logic3 OR logic2

    7 logic2: logic1
    8       | logic2 AND logic1

    9 logic1: expression
   10       | NOT expression

   11 expression: term
   12           | expression ADD term
   13           | expression SUB term

   14 term: single
   15     | term MUL single
   16     | term DIV single

   17 single: NUM
   18       | SUB single
   19       | ADD single
   20       | LP logic3 RP


Terminals, with rules where they appear

    $end (0) 0 4
    error (256)
    ADD (258) 12 19
    SUB (259) 13 18
    MUL (260) 15
    DIV (261) 16
    CR (262) 3
    LP (263) 20
    RP (264) 20
    AND (265) 8
    OR (266) 6
    NOT (267) 10
    NUM <d_num> (268) 17


Nonterminals, with rules where they appear

    $accept (14)
        on left: 0
    line_list (15)
        on left: 1 2
        on right: 0 2
    line (16)
        on left: 3 4
        on right: 1 2
    logic3 <d_num> (17)
        on left: 5 6
        on right: 3 4 6 20
    logic2 <d_num> (18)
        on left: 7 8
        on right: 5 6 8
    logic1 <d_num> (19)
        on left: 9 10
        on right: 7 8
    expression <d_num> (20)
        on left: 11 12 13
        on right: 9 10 12 13
    term <d_num> (21)
        on left: 14 15 16
        on right: 11 12 13 15 16
    single <d_num> (22)
        on left: 17 18 19 20
        on right: 14 15 16 18 19


State 0

    0 $accept: • line_list $end

    ADD  shift, and go to state 1
    SUB  shift, and go to state 2
    LP   shift, and go to state 3
    NOT  shift, and go to state 4
    NUM  shift, and go to state 5

    line_list   go to state 6
    line        go to state 7
    logic3      go to state 8
    logic2      go to state 9
    logic1      go to state 10
    expression  go to state 11
    term        go to state 12
    single      go to state 13


State 1

   19 single: ADD • single

    ADD  shift, and go to state 1
    SUB  shift, and go to state 2
    LP   shift, and go to state 3
    NUM  shift, and go to state 5

    single  go to state 14


State 2

   18 single: SUB • single

    ADD  shift, and go to state 1
    SUB  shift, and go to state 2
    LP   shift, and go to state 3
    NUM  shift, and go to state 5

    single  go to state 15


State 3

   20 single: LP • logic3 RP

    ADD  shift, and go to state 1
    SUB  shift, and go to state 2
    LP   shift, and go to state 3
    NOT  shift, and go to state 4
    NUM  shift, and go to state 5

    logic3      go to state 16
    logic2      go to state 9
    logic1      go to state 10
    expression  go to state 11
    term        go to state 12
    single      go to state 13


State 4

   10 logic1: NOT • expression

    ADD  shift, and go to state 1
    SUB  shift, and go to state 2
    LP   shift, and go to state 3
    NUM  shift, and go to state 5

    expression  go to state 17
    term        go to state 12
    single      go to state 13


State 5

   17 single: NUM •

    $default  reduce using rule 17 (single)


State 6

    0 $accept: line_list • $end
    2 line_list: line_list • line

    $end  shift, and go to state 18
    ADD   shift, and go to state 1
    SUB   shift, and go to state 2
    LP    shift, and go to state 3
    NOT   shift, and go to state 4
    NUM   shift, and go to state 5

    line        go to state 19
    logic3      go to state 8
    logic2      go to state 9
    logic1      go to state 10
    expression  go to state 11
    term        go to state 12
    single      go to state 13


State 7

    1 line_list: line •

    $default  reduce using rule 1 (line_list)


State 8

    3 line: logic3 • CR
    4     | logic3 • $end
    6 logic3: logic3 • OR logic2

    $end  shift, and go to state 20
    CR    shift, and go to state 21
    OR    shift, and go to state 22


State 9

    5 logic3: logic2 •
    8 logic2: logic2 • AND logic1

    AND  shift, and go to state 23

    $default  reduce using rule 5 (logic3)


State 10

    7 logic2: logic1 •

    $default  reduce using rule 7 (logic2)


State 11

    9 logic1: expression •
   12 expression: expression • ADD term
   13           | expression • SUB term

    ADD  shift, and go to state 24
    SUB  shift, and go to state 25

    $default  reduce using rule 9 (logic1)


State 12

   11 expression: term •
   15 term: term • MUL single
   16     | term • DIV single

    MUL  shift, and go to state 26
    DIV  shift, and go to state 27

    $default  reduce using rule 11 (expression)


State 13

   14 term: single •

    $default  reduce using rule 14 (term)


State 14

   19 single: ADD single •

    $default  reduce using rule 19 (single)


State 15

   18 single: SUB single •

    $default  reduce using rule 18 (single)


State 16

    6 logic3: logic3 • OR logic2
   20 single: LP logic3 • RP

    RP  shift, and go to state 28
    OR  shift, and go to state 22


State 17

   10 logic1: NOT expression •
   12 expression: expression • ADD term
   13           | expression • SUB term

    ADD  shift, and go to state 24
    SUB  shift, and go to state 25

    $default  reduce using rule 10 (logic1)


State 18

    0 $accept: line_list $end •

    $default  accept


State 19

    2 line_list: line_list line •

    $default  reduce using rule 2 (line_list)


State 20

    4 line: logic3 $end •

    $default  reduce using rule 4 (line)


State 21

    3 line: logic3 CR •

    $default  reduce using rule 3 (line)


State 22

    6 logic3: logic3 OR • logic2

    ADD  shift, and go to state 1
    SUB  shift, and go to state 2
    LP   shift, and go to state 3
    NOT  shift, and go to state 4
    NUM  shift, and go to state 5

    logic2      go to state 29
    logic1      go to state 10
    expression  go to state 11
    term        go to state 12
    single      go to state 13


State 23

    8 logic2: logic2 AND • logic1

    ADD  shift, and go to state 1
    SUB  shift, and go to state 2
    LP   shift, and go to state 3
    NOT  shift, and go to state 4
    NUM  shift, and go to state 5

    logic1      go to state 30
    expression  go to state 11
    term        go to state 12
    single      go to state 13


State 24

   12 expression: expression ADD • term

    ADD  shift, and go to state 1
    SUB  shift, and go to state 2
    LP   shift, and go to state 3
    NUM  shift, and go to state 5

    term    go to state 31
    single  go to state 13


State 25

   13 expression: expression SUB • term

    ADD  shift, and go to state 1
    SUB  shift, and go to state 2
    LP   shift, and go to state 3
    NUM  shift, and go to state 5

    term    go to state 32
    single  go to state 13


State 26

   15 term: term MUL • single

    ADD  shift, and go to state 1
    SUB  shift, and go to state 2
    LP   shift, and go to state 3
    NUM  shift, and go to state 5

    single  go to state 33


State 27

   16 term: term DIV • single

    ADD  shift, and go to state 1
    SUB  shift, and go to state 2
    LP   shift, and go to state 3
    NUM  shift, and go to state 5

    single  go to state 34


State 28

   20 single: LP logic3 RP •

    $default  reduce using rule 20 (single)


State 29

    6 logic3: logic3 OR logic2 •
    8 logic2: logic2 • AND logic1

    AND  shift, and go to state 23

    $default  reduce using rule 6 (logic3)


State 30

    8 logic2: logic2 AND logic1 •

    $default  reduce using rule 8 (logic2)


State 31

   12 expression: expression ADD term •
   15 term: term • MUL single
   16     | term • DIV single

    MUL  shift, and go to state 26
    DIV  shift, and go to state 27

    $default  reduce using rule 12 (expression)


State 32

   13 expression: expression SUB term •
   15 term: term • MUL single
   16     | term • DIV single

    MUL  shift, and go to state 26
    DIV  shift, and go to state 27

    $default  reduce using rule 13 (expression)


State 33

   15 term: term MUL single •

    $default  reduce using rule 15 (term)


State 34

   16 term: term DIV single •

    $default  reduce using rule 16 (term)
